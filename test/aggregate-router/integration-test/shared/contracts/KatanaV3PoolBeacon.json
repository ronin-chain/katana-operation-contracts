{"abi":[{"type":"constructor","inputs":[{"name":"poolImplementation","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"POOL_PROXY_INIT_CODE","inputs":[],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"POOL_PROXY_INIT_CODE_HASH","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"implementation","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"renounceOwnership","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"transferOwnership","inputs":[{"name":"newOwner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"upgradeTo","inputs":[{"name":"newImplementation","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"OwnershipTransferred","inputs":[{"name":"previousOwner","type":"address","indexed":true,"internalType":"address"},{"name":"newOwner","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"Upgraded","inputs":[{"name":"implementation","type":"address","indexed":true,"internalType":"address"}],"anonymous":false}],"bytecode":{"object":"0x608060405234801561001057600080fd5b506040516111ec3803806111ec8339818101604052602081101561003357600080fd5b505180600061004061009a565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506100938161009e565b5050610114565b3390565b6100b18161010e60201b6104c61760201c565b6100ec5760405162461bcd60e51b81526004018080602001828103825260338152602001806111b96033913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b3b151590565b611096806101236000396000f3fe60806040523480156200001157600080fd5b5060043610620000885760003560e01c8063715018a61162000063578063715018a614620000fa578063885fa0a014620001045780638da5cb5b1462000186578063f2fde38b14620001905762000088565b80632c2ad332146200008d5780633659cfe614620000a95780635c60da1b14620000d4575b600080fd5b62000097620001b9565b60408051918252519081900360200190f35b620000d260048036036020811015620000c157600080fd5b50356001600160a01b0316620001e8565b005b620000de620002a3565b604080516001600160a01b039092168252519081900360200190f35b620000d2620002b2565b6200010e62000375565b6040805160208082528351818301528351919283929083019185019080838360005b838110156200014a57818101518382015260200162000130565b50505050905090810190601f168015620001785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b620000de6200039c565b620000d260048036036020811015620001a857600080fd5b50356001600160a01b0316620003ab565b604051620001ca602082016200053a565b6020820181038252601f19601f820116604052508051906020012081565b620001f2620004cc565b6001600160a01b0316620002056200039c565b6001600160a01b03161462000261576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6200026c81620004d0565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001546001600160a01b031690565b620002bc620004cc565b6001600160a01b0316620002cf6200039c565b6001600160a01b0316146200032b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60405162000386602082016200053a565b601f1982820381018352601f9091011660405281565b6000546001600160a01b031690565b620003b5620004cc565b6001600160a01b0316620003c86200039c565b6001600160a01b03161462000424576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166200046b5760405162461bcd60e51b8152600401808060200182810382526026815260200180620010086026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3b151590565b3390565b620004db81620004c6565b620005185760405162461bcd60e51b81526004018080602001828103825260338152602001806200102e6033913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610abf80620005498339019056fe608060405234801561001057600080fd5b50604080516020810190915260008082529061002c8282610033565b5050610537565b6000806000806000336001600160a01b031663890357306040518163ffffffff1660e01b815260040160a06040518083038186803b15801561007457600080fd5b505afa158015610088573d6000803e3d6000fd5b505050506040513d60a081101561009e57600080fd5b5080516020808301516040808501516060860151608090960151825163059659e960e41b81529251959b509299509750939550935033926359659e909260048083019392829003018186803b1580156100f657600080fd5b505afa15801561010a573d6000803e3d6000fd5b505050506040513d602081101561012057600080fd5b5051604080516001600160a01b03808916602483015280881660448301528616606482015262ffffff85166084820152600284900b60a4808301919091528251808303909101815260c4909101909152602081810180516001600160e01b031662ef782f60e31b17905291985096506101a490889088906100316101ad821b17901c565b50505050505050565b6101c08261030260201b6101791760201c565b6101fb5760405162461bcd60e51b8152600401808060200182810382526025815260200180610a406025913960400191505060405180910390fd5b610273826001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561023757600080fd5b505afa15801561024b573d6000803e3d6000fd5b505050506040513d602081101561026157600080fd5b5051610302602090811b61017917901c565b6102ae5760405162461bcd60e51b8152600401808060200182810382526034815260200180610a8b6034913960400191505060405180910390fd5b6000805160206109ff8339815191528281558151156102fd576102fb6102d2610308565b83604051806060016040528060218152602001610a1f6021913961037b60201b61017f1760201c565b505b505050565b3b151590565b6000610312610480565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561034a57600080fd5b505afa15801561035e573d6000803e3d6000fd5b505050506040513d602081101561037457600080fd5b5051905090565b606061038684610302565b6103c15760405162461bcd60e51b8152600401808060200182810382526026815260200180610a656026913960400191505060405180910390fd5b600080856001600160a01b0316856040518082805190602001908083835b602083106103fe5780518252601f1990920191602091820191016103df565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d806000811461045e576040519150601f19603f3d011682016040523d82523d6000602084013e610463565b606091505b509092509050610474828286610493565b925050505b9392505050565b6000805160206109ff8339815191525490565b606083156104a2575081610479565b8251156104b25782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104fc5781810151838201526020016104e4565b50505050905090810190601f1680156105295780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6104b9806105466000396000f3fe60806040523661001357610011610017565b005b6100115b61001f61002f565b61002f61002a610283565b6102f6565b565b61003a82610179565b6100755760405162461bcd60e51b81526004018080602001828103825260258152602001806104056025913960400191505060405180910390fd5b6100e2826001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156100b157600080fd5b505afa1580156100c5573d6000803e3d6000fd5b505050506040513d60208110156100db57600080fd5b5051610179565b61011d5760405162461bcd60e51b81526004018080602001828103825260348152602001806104506034913960400191505060405180910390fd5b7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5082815581511561017457610172610153610283565b836040518060600160405280602181526020016103e46021913961017f565b505b505050565b3b151590565b606061018a84610179565b6101c55760405162461bcd60e51b815260040180806020018281038252602681526020018061042a6026913960400191505060405180910390fd5b600080856001600160a01b0316856040518082805190602001908083835b602083106102025780518252601f1990920191602091820191016101e3565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610262576040519150601f19603f3d011682016040523d82523d6000602084013e610267565b606091505b509150915061027782828661031a565b925050505b9392505050565b600061028d6103be565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102c557600080fd5b505afa1580156102d9573d6000803e3d6000fd5b505050506040513d60208110156102ef57600080fd5b5051905090565b3660008037600080366000845af43d6000803e808015610315573d6000f35b3d6000fd5b6060831561032957508161027c565b8251156103395782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561038357818101518382015260200161036b565b50505050905090810190601f1680156103b05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50549056fe426561636f6e50726f78793a2066756e6374696f6e2063616c6c206661696c6564426561636f6e50726f78793a20626561636f6e206973206e6f74206120636f6e7472616374416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374426561636f6e50726f78793a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374a26469706673582212209c65523d67f8afadf51e47175e851044339c6f41c8b6bf4085f369c20b52750064736f6c63430007060033a3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50426561636f6e50726f78793a2066756e6374696f6e2063616c6c206661696c6564426561636f6e50726f78793a20626561636f6e206973206e6f74206120636f6e7472616374416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374426561636f6e50726f78793a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e74726163744f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735570677261646561626c65426561636f6e3a20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374a2646970667358221220a261af3e6c1c3a36cfe6bd5b82ef21bc90719be189a29adb980007d1ff69f8bf64736f6c634300070600335570677261646561626c65426561636f6e3a20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","sourceMap":"280:455:60:-:0;;;652:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;652:81:60;;867:17:25;887:12;:10;:12::i;:::-;909:6;:18;;-1:-1:-1;;;;;;909:18:25;-1:-1:-1;;;;;909:18:25;;;;;;;942:43;;909:18;;-1:-1:-1;909:18:25;942:43;;909:6;;942:43;-1:-1:-1;910:35:36;929:15;910:18;:35::i;:::-;863:89;652:81:60;280:455;;598:104:46;685:10;598:104;:::o;1743:226:36:-;1824:37;1843:17;1824:18;;;;;:37;;:::i;:::-;1816:101;;;;-1:-1:-1;;;1816:101:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1927:15;:35;;-1:-1:-1;;;;;;1927:35:36;-1:-1:-1;;;;;1927:35:36;;;;;;;;;;1743:226::o;718:413:45:-;1078:20;1116:8;;;718:413::o;280:455:60:-;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x60806040523480156200001157600080fd5b5060043610620000885760003560e01c8063715018a61162000063578063715018a614620000fa578063885fa0a014620001045780638da5cb5b1462000186578063f2fde38b14620001905762000088565b80632c2ad332146200008d5780633659cfe614620000a95780635c60da1b14620000d4575b600080fd5b62000097620001b9565b60408051918252519081900360200190f35b620000d260048036036020811015620000c157600080fd5b50356001600160a01b0316620001e8565b005b620000de620002a3565b604080516001600160a01b039092168252519081900360200190f35b620000d2620002b2565b6200010e62000375565b6040805160208082528351818301528351919283929083019185019080838360005b838110156200014a57818101518382015260200162000130565b50505050905090810190601f168015620001785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b620000de6200039c565b620000d260048036036020811015620001a857600080fd5b50356001600160a01b0316620003ab565b604051620001ca602082016200053a565b6020820181038252601f19601f820116604052508051906020012081565b620001f2620004cc565b6001600160a01b0316620002056200039c565b6001600160a01b03161462000261576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6200026c81620004d0565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001546001600160a01b031690565b620002bc620004cc565b6001600160a01b0316620002cf6200039c565b6001600160a01b0316146200032b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60405162000386602082016200053a565b601f1982820381018352601f9091011660405281565b6000546001600160a01b031690565b620003b5620004cc565b6001600160a01b0316620003c86200039c565b6001600160a01b03161462000424576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166200046b5760405162461bcd60e51b8152600401808060200182810382526026815260200180620010086026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3b151590565b3390565b620004db81620004c6565b620005185760405162461bcd60e51b81526004018080602001828103825260338152602001806200102e6033913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610abf80620005498339019056fe608060405234801561001057600080fd5b50604080516020810190915260008082529061002c8282610033565b5050610537565b6000806000806000336001600160a01b031663890357306040518163ffffffff1660e01b815260040160a06040518083038186803b15801561007457600080fd5b505afa158015610088573d6000803e3d6000fd5b505050506040513d60a081101561009e57600080fd5b5080516020808301516040808501516060860151608090960151825163059659e960e41b81529251959b509299509750939550935033926359659e909260048083019392829003018186803b1580156100f657600080fd5b505afa15801561010a573d6000803e3d6000fd5b505050506040513d602081101561012057600080fd5b5051604080516001600160a01b03808916602483015280881660448301528616606482015262ffffff85166084820152600284900b60a4808301919091528251808303909101815260c4909101909152602081810180516001600160e01b031662ef782f60e31b17905291985096506101a490889088906100316101ad821b17901c565b50505050505050565b6101c08261030260201b6101791760201c565b6101fb5760405162461bcd60e51b8152600401808060200182810382526025815260200180610a406025913960400191505060405180910390fd5b610273826001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561023757600080fd5b505afa15801561024b573d6000803e3d6000fd5b505050506040513d602081101561026157600080fd5b5051610302602090811b61017917901c565b6102ae5760405162461bcd60e51b8152600401808060200182810382526034815260200180610a8b6034913960400191505060405180910390fd5b6000805160206109ff8339815191528281558151156102fd576102fb6102d2610308565b83604051806060016040528060218152602001610a1f6021913961037b60201b61017f1760201c565b505b505050565b3b151590565b6000610312610480565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561034a57600080fd5b505afa15801561035e573d6000803e3d6000fd5b505050506040513d602081101561037457600080fd5b5051905090565b606061038684610302565b6103c15760405162461bcd60e51b8152600401808060200182810382526026815260200180610a656026913960400191505060405180910390fd5b600080856001600160a01b0316856040518082805190602001908083835b602083106103fe5780518252601f1990920191602091820191016103df565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d806000811461045e576040519150601f19603f3d011682016040523d82523d6000602084013e610463565b606091505b509092509050610474828286610493565b925050505b9392505050565b6000805160206109ff8339815191525490565b606083156104a2575081610479565b8251156104b25782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104fc5781810151838201526020016104e4565b50505050905090810190601f1680156105295780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6104b9806105466000396000f3fe60806040523661001357610011610017565b005b6100115b61001f61002f565b61002f61002a610283565b6102f6565b565b61003a82610179565b6100755760405162461bcd60e51b81526004018080602001828103825260258152602001806104056025913960400191505060405180910390fd5b6100e2826001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156100b157600080fd5b505afa1580156100c5573d6000803e3d6000fd5b505050506040513d60208110156100db57600080fd5b5051610179565b61011d5760405162461bcd60e51b81526004018080602001828103825260348152602001806104506034913960400191505060405180910390fd5b7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5082815581511561017457610172610153610283565b836040518060600160405280602181526020016103e46021913961017f565b505b505050565b3b151590565b606061018a84610179565b6101c55760405162461bcd60e51b815260040180806020018281038252602681526020018061042a6026913960400191505060405180910390fd5b600080856001600160a01b0316856040518082805190602001908083835b602083106102025780518252601f1990920191602091820191016101e3565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610262576040519150601f19603f3d011682016040523d82523d6000602084013e610267565b606091505b509150915061027782828661031a565b925050505b9392505050565b600061028d6103be565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102c557600080fd5b505afa1580156102d9573d6000803e3d6000fd5b505050506040513d60208110156102ef57600080fd5b5051905090565b3660008037600080366000845af43d6000803e808015610315573d6000f35b3d6000fd5b6060831561032957508161027c565b8251156103395782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561038357818101518382015260200161036b565b50505050905090810190601f1680156103b05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50549056fe426561636f6e50726f78793a2066756e6374696f6e2063616c6c206661696c6564426561636f6e50726f78793a20626561636f6e206973206e6f74206120636f6e7472616374416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374426561636f6e50726f78793a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374a26469706673582212209c65523d67f8afadf51e47175e851044339c6f41c8b6bf4085f369c20b52750064736f6c63430007060033a3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50426561636f6e50726f78793a2066756e6374696f6e2063616c6c206661696c6564426561636f6e50726f78793a20626561636f6e206973206e6f74206120636f6e7472616374416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374426561636f6e50726f78793a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e74726163744f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735570677261646561626c65426561636f6e3a20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374a2646970667358221220a261af3e6c1c3a36cfe6bd5b82ef21bc90719be189a29adb980007d1ff69f8bf64736f6c63430007060033","sourceMap":"280:455:60:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;555:92;;;:::i;:::-;;;;;;;;;;;;;;;;1401:167:36;;;;;;;;;;;;;;;;-1:-1:-1;1401:167:36;-1:-1:-1;;;;;1401:167:36;;:::i;:::-;;1030:112;;;:::i;:::-;;;;-1:-1:-1;;;;;1030:112:36;;;;;;;;;;;;;;1700:145:25;;;:::i;412:90:60:-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1068:85:25;;;:::i;1994:240::-;;;;;;;;;;;;;;;;-1:-1:-1;1994:240:25;-1:-1:-1;;;;;1994:240:25;;:::i;555:92:60:-;466:36;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;616:31;;;;;;555:92;:::o;1401:167:36:-;1291:12:25;:10;:12::i;:::-;-1:-1:-1;;;;;1280:23:25;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1280:23:25;;1272:68;;;;;-1:-1:-1;;;1272:68:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1482:37:36::1;1501:17;1482:18;:37::i;:::-;1534:27;::::0;-1:-1:-1;;;;;1534:27:36;::::1;::::0;::::1;::::0;;;::::1;1401:167:::0;:::o;1030:112::-;1120:15;;-1:-1:-1;;;;;1120:15:36;;1030:112::o;1700:145:25:-;1291:12;:10;:12::i;:::-;-1:-1:-1;;;;;1280:23:25;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1280:23:25;;1272:68;;;;;-1:-1:-1;;;1272:68:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1806:1:::1;1790:6:::0;;1769:40:::1;::::0;-1:-1:-1;;;;;1790:6:25;;::::1;::::0;1769:40:::1;::::0;1806:1;;1769:40:::1;1836:1;1819:19:::0;;-1:-1:-1;;;;;;1819:19:25::1;::::0;;1700:145::o;412:90:60:-;466:36;;;;;;;:::i;:::-;-1:-1:-1;;466:36:60;;;;;;;;;;;;;;412:90;:::o;1068:85:25:-;1114:7;1140:6;-1:-1:-1;;;;;1140:6:25;;1068:85::o;1994:240::-;1291:12;:10;:12::i;:::-;-1:-1:-1;;;;;1280:23:25;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1280:23:25;;1272:68;;;;;-1:-1:-1;;;1272:68:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2082:22:25;::::1;2074:73;;;;-1:-1:-1::0;;;2074:73:25::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2183:6;::::0;;2162:38:::1;::::0;-1:-1:-1;;;;;2162:38:25;;::::1;::::0;2183:6;::::1;::::0;2162:38:::1;::::0;::::1;2210:6;:17:::0;;-1:-1:-1;;;;;;2210:17:25::1;-1:-1:-1::0;;;;;2210:17:25;;;::::1;::::0;;;::::1;::::0;;1994:240::o;718:413:45:-;1078:20;1116:8;;;718:413::o;598:104:46:-;685:10;598:104;:::o;1743:226:36:-;1824:37;1843:17;1824:18;:37::i;:::-;1816:101;;;;-1:-1:-1;;;1816:101:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1927:15;:35;;-1:-1:-1;;;;;;1927:35:36;-1:-1:-1;;;;;1927:35:36;;;;;;;;;;1743:226::o;-1:-1:-1:-;;;;;;;;:::o","linkReferences":{}},"methodIdentifiers":{"POOL_PROXY_INIT_CODE()":"885fa0a0","POOL_PROXY_INIT_CODE_HASH()":"2c2ad332","implementation()":"5c60da1b","owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b","upgradeTo(address)":"3659cfe6"},"rawMetadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolImplementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POOL_PROXY_INIT_CODE\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_PROXY_INIT_CODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Returns the current implementation address.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrades the beacon to a new implementation. Emits an {Upgraded} event. Requirements: - msg.sender must be the owner of the contract. - `newImplementation` must be a contract.\"}},\"stateVariables\":{\"POOL_PROXY_INIT_CODE\":{\"details\":\"The init code for the pool proxy\"},\"POOL_PROXY_INIT_CODE_HASH\":{\"details\":\"The init code hash for the pool proxy\"}},\"title\":\"Beacon for deploying and upgrading Katana V3 pools\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/core/KatanaV3PoolBeacon.sol\":\"KatanaV3PoolBeacon\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@uniswap/lib/contracts/=lib/solidity-lib/contracts/\",\":base64-sol/=lib/base64/\",\":base64/=lib/base64/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":solidity-lib/=lib/solidity-lib/contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"./IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy {\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 private constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1));\\n        _setBeacon(beacon, data);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address beacon) {\\n        bytes32 slot = _BEACON_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            beacon := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_beacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        require(\\n            Address.isContract(beacon),\\n            \\\"BeaconProxy: beacon is not a contract\\\"\\n        );\\n        require(\\n            Address.isContract(IBeacon(beacon).implementation()),\\n            \\\"BeaconProxy: beacon implementation is not a contract\\\"\\n        );\\n        bytes32 slot = _BEACON_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, beacon)\\n        }\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(_implementation(), data, \\\"BeaconProxy: function call failed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d454d98cadfb9ae490875140b97491dc65b4eaba343eb6ff668fe48d7e81c86\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x77c167740c8227e2569064dabdb2d683800f409743bda1bab8d66d5a2dae3674\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {\\n    }\\n}\\n\",\"keccak256\":\"0x202faa683f33bdc2fdef9c4a75626058974c69b9bee9cb981b09549ce91f0938\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../access/Ownable.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0x49b1e1dd91f7e83a34def2229e816a2396ae74bec2eb151fb6def9a9441b410e\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"src/core/KatanaV3PoolBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/proxy/UpgradeableBeacon.sol\\\";\\n\\nimport \\\"./interfaces/IKatanaV3PoolBeaconImmutables.sol\\\";\\n\\nimport \\\"./KatanaV3PoolProxy.sol\\\";\\n\\n/// @title Beacon for deploying and upgrading Katana V3 pools\\ncontract KatanaV3PoolBeacon is IKatanaV3PoolBeaconImmutables, UpgradeableBeacon {\\n  /// @inheritdoc IKatanaV3PoolBeaconImmutables\\n  bytes public constant override POOL_PROXY_INIT_CODE = type(KatanaV3PoolProxy).creationCode;\\n\\n  /// @inheritdoc IKatanaV3PoolBeaconImmutables\\n  bytes32 public constant override POOL_PROXY_INIT_CODE_HASH = keccak256(POOL_PROXY_INIT_CODE);\\n\\n  constructor(address poolImplementation) UpgradeableBeacon(poolImplementation) { }\\n}\\n\",\"keccak256\":\"0x720c74d8fb13ebffaa4a1124ac472c894625c6fdc85adf87bb1695544af7fa52\",\"license\":\"BUSL-1.1\"},\"src/core/KatanaV3PoolProxy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/proxy/BeaconProxy.sol\\\";\\n\\nimport \\\"./interfaces/IKatanaV3PoolDeployer.sol\\\";\\n\\nimport \\\"./interfaces/pool/IKatanaV3PoolImmutables.sol\\\";\\n\\ncontract KatanaV3PoolProxy is BeaconProxy {\\n  constructor() BeaconProxy(address(0), \\\"\\\") { }\\n\\n  /// @dev This function will be called with zero arguments but modified to include the pool's immutable parameters.\\n  function _setBeacon(address beacon, bytes memory data) internal virtual override {\\n    (address factory, address token0, address token1, uint24 fee, int24 tickSpacing) =\\n      IKatanaV3PoolDeployer(msg.sender).parameters();\\n\\n    beacon = IKatanaV3PoolDeployer(msg.sender).beacon();\\n    data = abi.encodeWithSelector(\\n      IKatanaV3PoolImmutables.initializeImmutables.selector, factory, token0, token1, fee, tickSpacing\\n    );\\n\\n    super._setBeacon(beacon, data);\\n  }\\n}\\n\",\"keccak256\":\"0x0d7a7f86d6d608c0b10b13168633a0a325d7ba900091f1b05358de79c54d97ef\",\"license\":\"BUSL-1.1\"},\"src/core/interfaces/IKatanaV3PoolBeaconImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Katana V3 Factory immutables\\ninterface IKatanaV3PoolBeaconImmutables {\\n  /// @dev The init code for the pool proxy\\n  function POOL_PROXY_INIT_CODE() external view returns (bytes memory);\\n\\n  /// @dev The init code hash for the pool proxy\\n  function POOL_PROXY_INIT_CODE_HASH() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x88b28dc7dc302510347f0e50398bf7a0c5d77f528bf95d8d2d7e7eeb5753b9dd\",\"license\":\"GPL-2.0-or-later\"},\"src/core/interfaces/IKatanaV3PoolDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title An interface for a contract that is capable of deploying Katana V3 Pools\\n/// @notice A contract that constructs a pool must implement this to pass arguments to the pool\\n/// @dev This is used to avoid having constructor arguments in the pool contract, which results in the init code hash\\n/// of the pool being constant allowing the CREATE2 address of the pool to be cheaply computed on-chain\\ninterface IKatanaV3PoolDeployer {\\n  /// @notice Returns the address of the beacon that pool proxies must be deployed with\\n  /// @dev This value MUST be immutable after initialization\\n  function beacon() external view returns (address);\\n\\n  /// @notice Get the parameters to be used in constructing the pool, set transiently during pool creation.\\n  /// @dev Called by the pool constructor to fetch the parameters of the pool\\n  /// Returns factory The factory address\\n  /// Returns token0 The first token of the pool by address sort order\\n  /// Returns token1 The second token of the pool by address sort order\\n  /// Returns fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n  /// Returns tickSpacing The minimum number of ticks between initialized ticks\\n  function parameters()\\n    external\\n    view\\n    returns (address factory, address token0, address token1, uint24 fee, int24 tickSpacing);\\n}\\n\",\"keccak256\":\"0x05ea96409d709121a2e5ff86949eecfbd864678791c1c5b4404e829c3883d2c4\",\"license\":\"GPL-2.0-or-later\"},\"src/core/interfaces/pool/IKatanaV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IKatanaV3PoolImmutables {\\n  /// @notice Initializes the pool with immutable-treated parameters\\n  /// @dev This function is only call once during deployment with the pool's immutable parameters\\n  /// @param factory_ The contract that deployed the pool, which must adhere to the IKatanaV3Factory interface\\n  /// @param token0_ The first of the two tokens of the pool, sorted by address\\n  /// @param token1_ The second of the two tokens of the pool, sorted by address\\n  /// @param fee_ The pool's fee in hundredths of a bip, i.e. 1e-6\\n  /// @param tickSpacing_ The pool tick spacing\\n  function initializeImmutables(address factory_, address token0_, address token1_, uint24 fee_, int24 tickSpacing_)\\n    external;\\n\\n  /// @notice The contract that deployed the pool, which must adhere to the IKatanaV3Factory interface\\n  /// @return The contract address\\n  function factory() external view returns (address);\\n\\n  /// @notice The governance contract, which controls the protocol\\n  /// @return The contract address\\n  function governance() external view returns (address);\\n\\n  /// @notice The contract that manages the pool's positions\\n  /// @return The contract address\\n  function positionManager() external view returns (address);\\n\\n  /// @notice The first of the two tokens of the pool, sorted by address\\n  /// @return The token contract address\\n  function token0() external view returns (address);\\n\\n  /// @notice The second of the two tokens of the pool, sorted by address\\n  /// @return The token contract address\\n  function token1() external view returns (address);\\n\\n  /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n  /// @return The fee\\n  function fee() external view returns (uint24);\\n\\n  /// @notice The pool tick spacing\\n  /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n  /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n  /// This value is an int24 to avoid casting even though it is always positive.\\n  /// @return The tick spacing\\n  function tickSpacing() external view returns (int24);\\n\\n  /// @notice The maximum amount of position liquidity that can use any tick in the range\\n  /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n  /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n  /// @return The max amount of liquidity per tick\\n  function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0x1d1fb09f408e1ad9e348ebe2480aa7351fea4858dedf0ff886207b340e54ae62\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","metadata":{"compiler":{"version":"0.7.6+commit.7338295f"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"poolImplementation","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"previousOwner","type":"address","indexed":true},{"internalType":"address","name":"newOwner","type":"address","indexed":true}],"type":"event","name":"OwnershipTransferred","anonymous":false},{"inputs":[{"internalType":"address","name":"implementation","type":"address","indexed":true}],"type":"event","name":"Upgraded","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"POOL_PROXY_INIT_CODE","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"POOL_PROXY_INIT_CODE_HASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"renounceOwnership"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"transferOwnership"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"upgradeTo"}],"devdoc":{"kind":"dev","methods":{"implementation()":{"details":"Returns the current implementation address."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"upgradeTo(address)":{"details":"Upgrades the beacon to a new implementation. Emits an {Upgraded} event. Requirements: - msg.sender must be the owner of the contract. - `newImplementation` must be a contract."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@uniswap/lib/contracts/=lib/solidity-lib/contracts/","base64-sol/=lib/base64/","base64/=lib/base64/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/","solidity-lib/=lib/solidity-lib/contracts/"],"optimizer":{"enabled":true,"runs":250},"metadata":{"useLiteralContent":true,"bytecodeHash":"ipfs"},"compilationTarget":{"src/core/KatanaV3PoolBeacon.sol":"KatanaV3PoolBeacon"},"evmVersion":"istanbul","libraries":{}},"sources":{"lib/openzeppelin-contracts/contracts/access/Ownable.sol":{"keccak256":"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7","urls":[],"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n","license":"MIT"},"lib/openzeppelin-contracts/contracts/proxy/BeaconProxy.sol":{"keccak256":"0x5d454d98cadfb9ae490875140b97491dc65b4eaba343eb6ff668fe48d7e81c86","urls":[],"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./Proxy.sol\";\nimport \"../utils/Address.sol\";\nimport \"./IBeacon.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy {\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 private constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1));\n        _setBeacon(beacon, data);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address beacon) {\n        bytes32 slot = _BEACON_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            beacon := sload(slot)\n        }\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_beacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        require(\n            Address.isContract(beacon),\n            \"BeaconProxy: beacon is not a contract\"\n        );\n        require(\n            Address.isContract(IBeacon(beacon).implementation()),\n            \"BeaconProxy: beacon implementation is not a contract\"\n        );\n        bytes32 slot = _BEACON_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, beacon)\n        }\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(_implementation(), data, \"BeaconProxy: function call failed\");\n        }\n    }\n}\n","license":"MIT"},"lib/openzeppelin-contracts/contracts/proxy/IBeacon.sol":{"keccak256":"0x77c167740c8227e2569064dabdb2d683800f409743bda1bab8d66d5a2dae3674","urls":[],"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n","license":"MIT"},"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol":{"keccak256":"0x202faa683f33bdc2fdef9c4a75626058974c69b9bee9cb981b09549ce91f0938","urls":[],"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 { revert(0, returndatasize()) }\n            default { return(0, returndatasize()) }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback () external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive () external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {\n    }\n}\n","license":"MIT"},"lib/openzeppelin-contracts/contracts/proxy/UpgradeableBeacon.sol":{"keccak256":"0x49b1e1dd91f7e83a34def2229e816a2396ae74bec2eb151fb6def9a9441b410e","urls":[],"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../access/Ownable.sol\";\nimport \"../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}\n","license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Address.sol":{"keccak256":"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3","urls":[],"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n","license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Context.sol":{"keccak256":"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0","urls":[],"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n","license":"MIT"},"src/core/KatanaV3PoolBeacon.sol":{"keccak256":"0x720c74d8fb13ebffaa4a1124ac472c894625c6fdc85adf87bb1695544af7fa52","urls":[],"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity =0.7.6;\n\nimport \"@openzeppelin/contracts/proxy/UpgradeableBeacon.sol\";\n\nimport \"./interfaces/IKatanaV3PoolBeaconImmutables.sol\";\n\nimport \"./KatanaV3PoolProxy.sol\";\n\n/// @title Beacon for deploying and upgrading Katana V3 pools\ncontract KatanaV3PoolBeacon is IKatanaV3PoolBeaconImmutables, UpgradeableBeacon {\n  /// @inheritdoc IKatanaV3PoolBeaconImmutables\n  bytes public constant override POOL_PROXY_INIT_CODE = type(KatanaV3PoolProxy).creationCode;\n\n  /// @inheritdoc IKatanaV3PoolBeaconImmutables\n  bytes32 public constant override POOL_PROXY_INIT_CODE_HASH = keccak256(POOL_PROXY_INIT_CODE);\n\n  constructor(address poolImplementation) UpgradeableBeacon(poolImplementation) { }\n}\n","license":"BUSL-1.1"},"src/core/KatanaV3PoolProxy.sol":{"keccak256":"0x0d7a7f86d6d608c0b10b13168633a0a325d7ba900091f1b05358de79c54d97ef","urls":[],"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity =0.7.6;\n\nimport \"@openzeppelin/contracts/proxy/BeaconProxy.sol\";\n\nimport \"./interfaces/IKatanaV3PoolDeployer.sol\";\n\nimport \"./interfaces/pool/IKatanaV3PoolImmutables.sol\";\n\ncontract KatanaV3PoolProxy is BeaconProxy {\n  constructor() BeaconProxy(address(0), \"\") { }\n\n  /// @dev This function will be called with zero arguments but modified to include the pool's immutable parameters.\n  function _setBeacon(address beacon, bytes memory data) internal virtual override {\n    (address factory, address token0, address token1, uint24 fee, int24 tickSpacing) =\n      IKatanaV3PoolDeployer(msg.sender).parameters();\n\n    beacon = IKatanaV3PoolDeployer(msg.sender).beacon();\n    data = abi.encodeWithSelector(\n      IKatanaV3PoolImmutables.initializeImmutables.selector, factory, token0, token1, fee, tickSpacing\n    );\n\n    super._setBeacon(beacon, data);\n  }\n}\n","license":"BUSL-1.1"},"src/core/interfaces/IKatanaV3PoolBeaconImmutables.sol":{"keccak256":"0x88b28dc7dc302510347f0e50398bf7a0c5d77f528bf95d8d2d7e7eeb5753b9dd","urls":[],"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Katana V3 Factory immutables\ninterface IKatanaV3PoolBeaconImmutables {\n  /// @dev The init code for the pool proxy\n  function POOL_PROXY_INIT_CODE() external view returns (bytes memory);\n\n  /// @dev The init code hash for the pool proxy\n  function POOL_PROXY_INIT_CODE_HASH() external view returns (bytes32);\n}\n","license":"GPL-2.0-or-later"},"src/core/interfaces/IKatanaV3PoolDeployer.sol":{"keccak256":"0x05ea96409d709121a2e5ff86949eecfbd864678791c1c5b4404e829c3883d2c4","urls":[],"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title An interface for a contract that is capable of deploying Katana V3 Pools\n/// @notice A contract that constructs a pool must implement this to pass arguments to the pool\n/// @dev This is used to avoid having constructor arguments in the pool contract, which results in the init code hash\n/// of the pool being constant allowing the CREATE2 address of the pool to be cheaply computed on-chain\ninterface IKatanaV3PoolDeployer {\n  /// @notice Returns the address of the beacon that pool proxies must be deployed with\n  /// @dev This value MUST be immutable after initialization\n  function beacon() external view returns (address);\n\n  /// @notice Get the parameters to be used in constructing the pool, set transiently during pool creation.\n  /// @dev Called by the pool constructor to fetch the parameters of the pool\n  /// Returns factory The factory address\n  /// Returns token0 The first token of the pool by address sort order\n  /// Returns token1 The second token of the pool by address sort order\n  /// Returns fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n  /// Returns tickSpacing The minimum number of ticks between initialized ticks\n  function parameters()\n    external\n    view\n    returns (address factory, address token0, address token1, uint24 fee, int24 tickSpacing);\n}\n","license":"GPL-2.0-or-later"},"src/core/interfaces/pool/IKatanaV3PoolImmutables.sol":{"keccak256":"0x1d1fb09f408e1ad9e348ebe2480aa7351fea4858dedf0ff886207b340e54ae62","urls":[],"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IKatanaV3PoolImmutables {\n  /// @notice Initializes the pool with immutable-treated parameters\n  /// @dev This function is only call once during deployment with the pool's immutable parameters\n  /// @param factory_ The contract that deployed the pool, which must adhere to the IKatanaV3Factory interface\n  /// @param token0_ The first of the two tokens of the pool, sorted by address\n  /// @param token1_ The second of the two tokens of the pool, sorted by address\n  /// @param fee_ The pool's fee in hundredths of a bip, i.e. 1e-6\n  /// @param tickSpacing_ The pool tick spacing\n  function initializeImmutables(address factory_, address token0_, address token1_, uint24 fee_, int24 tickSpacing_)\n    external;\n\n  /// @notice The contract that deployed the pool, which must adhere to the IKatanaV3Factory interface\n  /// @return The contract address\n  function factory() external view returns (address);\n\n  /// @notice The governance contract, which controls the protocol\n  /// @return The contract address\n  function governance() external view returns (address);\n\n  /// @notice The contract that manages the pool's positions\n  /// @return The contract address\n  function positionManager() external view returns (address);\n\n  /// @notice The first of the two tokens of the pool, sorted by address\n  /// @return The token contract address\n  function token0() external view returns (address);\n\n  /// @notice The second of the two tokens of the pool, sorted by address\n  /// @return The token contract address\n  function token1() external view returns (address);\n\n  /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n  /// @return The fee\n  function fee() external view returns (uint24);\n\n  /// @notice The pool tick spacing\n  /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n  /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n  /// This value is an int24 to avoid casting even though it is always positive.\n  /// @return The tick spacing\n  function tickSpacing() external view returns (int24);\n\n  /// @notice The maximum amount of position liquidity that can use any tick in the range\n  /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n  /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n  /// @return The max amount of liquidity per tick\n  function maxLiquidityPerTick() external view returns (uint128);\n}\n","license":"GPL-2.0-or-later"}},"version":1},"id":60}